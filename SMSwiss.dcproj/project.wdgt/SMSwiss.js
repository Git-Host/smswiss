/* 
 This file was generated by Dashcode.  
 You may edit this file to customize your widget or web page 
 according to the license.txt file included in the project.
 */
 
var addressBoockEngine = new addressBoock();
var settingsEngine = new SettingsEngine();
        
function globalSearchKeyPressed(event){
            addressBoockEngine.searchKeyPressed(event);
}
function globalSearchContacts(event){
            addressBoockEngine.searchContacts(event);
}
function globalSetRunningAccount(event){
            var accountSelectList = document.getElementById("selectedAccount").object;
            var ruuningAccount = accountSelectList.getSelectedIndex();
            settingsEngine.setRunningAccount(ruuningAccount);
            countChars(null);// Update the sms count in case the engine is changed
}

function globalHideContactList(event)
{
   //if the text field is in focus it does not make sens to show the
   //address boock contact list
   addressBoockEngine.hideContactList();
}


function globalSetXtraAccountSettings(event){

    var xtraLabel = document.getElementById("xtraAcountSettingLabel");
    var xtraText = document.getElementById("xtraAccountSettingText");
    var xtraInfo = document.getElementById("xtraAcountSettingInfo");
    
    var provider = document.getElementById("providerList");
    
    if (provider.object.getSelectedIndex() == 2) {  //Yallow
        xtraLabel.style.visibility = "visible";
        xtraText.style.visibility = "visible";
        xtraInfo.style.visibility = "visible";
        xtraInfo.setAttribute('onclick', 'widget.openURL("http://code.google.com/p/smswiss/wiki/YalloAccountSetUp")'); 
        xtraLabel.innerText = "Captcha";
    } else {
        xtraLabel.style.visibility = "hidden";
        xtraText.style.visibility = "hidden";
        xtraInfo.style.visibility = "hidden";
    }
}



function globalSaveMoreInfo(){
    widget.setPreferenceForKey(moreInfoValue.value,moreInfoKey.innerHTML);
    moreInfo.style.visibility="hidden";
    settingsEngine.getSMSEngine().getAvailSMS();
}

 
 
var SMSEngineStatus = {
                registeringUser : "Logging in ...",
                sendingSMS: "Sending SMS ...",
                loadingAccountStatus: "Loading account ..."
};

var SMSEngineFeedBack = {
                connectionError : "Connection error!",
                authenticationError: "Authentication error!",
                cookieError: "Cookie error!",
                smsCountError :"SMS count error!",
                smsSendingError: "SMS sending error!",
                smsSent: "SMS successfully sent!",
                authenticationSuccessful: "User successfully authenticated!",
                
                invalidPhoneNumberError: "Invalid phone number!" //Special feedBack not used by the SMSEngine
};

//
// Function: load()
// Called by HTML body element's onload event when the widget is ready to start
//
function load()
{
    setTimeout("checkForUpdate()",50);
    setTimeout("TrackWidget('init')",100);
    dashcode.setupParts();
    
    settingsEngine.loadSettings();
    if(!settingsEngine.hasAtLeastOneAccountSet()){ showBack()};
    
}


//
// Function: remove()
// Called when the widget has been removed from the Dashboard
//
function remove()
{
    // Stop any timers to prevent CPU usage
    // Remove any preferences as needed
    // widget.setPreferenceForKey(null, dashcode.createInstancePreferenceKey("your-key"));
}

//
// Function: hide()
// Called when the widget has been hidden
//
function hide()
{
    // Stop any timers to prevent CPU usage
}

//
// Function: show()
// Called when the widget has been shown
//
function show()
{
    // Restart any timers that were stopped on hide
}

//
// Function: sync()
// Called when the widget has been synchronized with .Mac
//
function sync()
{
    
    settingEngine.sync();
    // Retrieve any preference values that you need to be synchronized here
    // Use this for an instance key's value:
    // instancePreferenceValue = widget.preferenceForKey(null, dashcode.createInstancePreferenceKey("your-key"));
    //
    // Or this for global key's value:
    // globalPreferenceValue = widget.preferenceForKey(null, "your-key");
}



//TODO: complete status feed back
function engineStatusFeedBack(event){
    alert(event);
    statusDesc.innerHTML = event;
    statusIcon.src = "Images/loading.gif"
    statusIcon.style.visibility="visible";
}
//TODO: complete feed back
function engineFeedBack(event){
    alert(event);
    
    statusIcon.style.visibility="hidden";
    statusDesc.innerHTML = "";
    
    if(settingsEngine.getSMSEngine().getSMSCount() != null){
            statusDesc.innerHTML = "SMS left: " + settingsEngine.getSMSEngine().getSMSCount();
    }
    
    if(event == SMSEngineFeedBack.smsSent){
        statusIcon.src = "Images/sent.png"
        statusIcon.style.visibility="visible";
        
        if(settingsEngine.getDoVibrate()){
            setTimeout('shake_widget(0,3)', 40);
        }
        if(settingsEngine.getDoClear()){
            clearSMS(null);
        } 

        return;
    }
    
    
    
    if(event == SMSEngineFeedBack.authenticationSuccessful){
        return;
    }
    
    if(event == SMSEngineFeedBack.smsSendingError){
            statusDesc.innerHTML = "Unable to send SMS!";
    }        
        
    statusIcon.src = "Images/error.png"
    statusIcon.style.visibility="visible";
}

function needUpdateFeedBack(version){
	alert("A new version is avilable, please check our web site!");
	messageField.value="A new version of the SMSwiss widget is available, download it from: http://code.google.com/p/smswiss/";
}

function sendNewSMS()
{
        if (settingsEngine.getSMSEngine() != null
            && settingsEngine.getSMSEngine().isConnected() 
            && settingsEngine.getSMSEngine().hasEnoughCredits(messageField.value.length)
            && receiverNumberField.value != "") {            
                 
                var phoneNumber =receiverNumberField.value.split(" (")[0];
                var numCheckregex = new RegExp('^[+]?[0-9./ ]+');

                if(numCheckregex.exec(phoneNumber) == null){ //The number is not valid
                      engineFeedBack(SMSEngineFeedBack.invalidPhoneNumberError);
                      return;
                }   
                phoneNumber =  phoneNumber.replace(/-/g, "");   //Remove all dash
                phoneNumber =  phoneNumber.replace(/\//g, "");  //Remove all slash 
                phoneNumber =  phoneNumber.replace(/\\/g, "");  //Remove all back slash
                phoneNumber =  phoneNumber.replace(/ /g, "");   //Remove all spaces
                phoneNumber =  phoneNumber.replace(/_/g, "");   //Remove all undersocer
                phoneNumber =  phoneNumber.replace(/\./g, "");   //Remove all dot   
                
                setTimeout("TrackWidget('sms(" + settingsEngine.getCurrentProviderName() + ")')" ,100);
                
                settingsEngine.getSMSEngine().Send(messageField.value,phoneNumber);
        }else{
            alert("The sms engine is not in state to send sms");
        }
}


function focusMessage(){
    messageField.focus();
}



//
// Function: showBack(event)
// Called when the info button is clicked to show the back of the widget
//
// event: onClick event from the info button
//
function showBack(event)
{
    //Reload data to ensure that the running account is selected
    document.getElementById("accountList").object.reloadData();
    settingsEngine.loadAccountData(settingsEngine.getRunningAccount());
    
    //settingsEngine.loadSettings(); reloading settings is probably non needed when showing the back of the widget
    
    var front = document.getElementById("front");
    var back = document.getElementById("back");

    if (window.widget) {
        widget.prepareForTransition("ToBack");
    }

    front.style.display = "none";
    back.style.display = "block";

    if (window.widget) {
        setTimeout('widget.performTransition();', 0);
    }
    

    
}

//
// Function: showFront(event)
// Called when the done button is clicked from the back of the widget
//
// event: onClick event from the done button
//
function showFront(event)
{
    
    
    
    
    var front = document.getElementById("front");
    var back = document.getElementById("back");

    if (window.widget) {
        widget.prepareForTransition("ToFront");
    }

    front.style.display="block";
    back.style.display="none";
    
    //only load setting after the style of the fron pane has changed
    settingsEngine.saveSettings();
    settingsEngine.loadSettings(); //After saving reload all settings

    if (window.widget) {
        setTimeout('widget.performTransition();', 0);
    }
}

if (window.widget) {
    widget.onremove = remove;
    widget.onhide = hide;
    widget.onshow = show;
    widget.onsync = sync;
}






function showSettingPage(event)
{
    accountPage.style.visibility='hidden';
    settingPage.style.visibility='hidden';
    aboutPage.style.visibility='hidden';
    phoneBookPage.style.visibility='hidden';
    
    if(event.srcElement.value == "Accounts"){
        accountPage.style.visibility='visible';
    }
    if(event.srcElement.value == "Settings"){
        settingPage.style.visibility='visible';
    }
    if(event.srcElement.value == "About"){
        aboutPage.style.visibility='visible';
    }
    if(event.srcElement.value == "PhoneBook"){
        phoneBookPage.style.visibility='visible';
    }


}


function clearSMS(event)
{
    receiverNumberField.value = "";
    messageField.value="";
    addressBoockEngine.searchKeyPressed(null);
}


function countChars(event)
{
	
	if (messageField.value=="") {
		counter.innerHTML="";
		return;
	}

	//((... | 0) is like casting to integer
	counter.innerHTML = ((messageField.value.length-1)/settingsEngine.getSMSEngine().GetSMSCharsCount() | 0)+1 + " - " + messageField.value.length;
}

function shake_widget(count,pad) {
	front.style.left= pad + "px";
	
    pad *= -1;
    count++;
	if (count > 9) {
		front.style.left="0px";
        return;
	} else
		setTimeout('shake_widget('+count+','+pad+')', 40);
}



